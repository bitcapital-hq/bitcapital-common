"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = require("../User/User");
const base_1 = require("../../base");
const Asset_1 = require("../Asset");
const Transaction_1 = require("../Transaction");
const Payment_1 = require("../Payment");
const WalletState_1 = require("./WalletState");
const Product_1 = require("../Domain/Product");
class Wallet extends base_1.BaseModel {
    constructor(data) {
        super(data);
        this.status = undefined;
        this.stellar = undefined;
        this.user = undefined;
        this.product = undefined;
        this.additionalData = undefined;
        this.balances = undefined;
        this.issuedAssets = undefined;
        this.assets = undefined;
        this.transactions = undefined;
        this.received = undefined;
        Object.assign(this, data);
        this.user = data.user && new User_1.User(data.user);
        this.issuedAssets = data.issuedAssets && data.issuedAssets.map(issuedAsset => new Asset_1.Asset(issuedAsset));
        this.assets = data.assets && data.assets.map(asset => new Asset_1.Asset(asset));
        this.states = data.states && data.states.map(state => new WalletState_1.WalletState(state));
        this.transactions = data.transactions && data.transactions.map(transaction => new Transaction_1.Transaction(transaction));
        this.received = data.received && data.received.map(received => new Payment_1.Payment(received));
        this.product = data.product && new Product_1.Product(data.product);
    }
}
exports.Wallet = Wallet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL21vZGVscy9XYWxsZXQvV2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQWdEO0FBSWhELHFDQUF3RDtBQUN4RCxvQ0FBOEM7QUFDOUMsZ0RBQWdFO0FBQ2hFLHdDQUFvRDtBQUNwRCwrQ0FBK0Q7QUFDL0QsK0NBQTJEO0FBa0IzRCxNQUFhLE1BQU8sU0FBUSxnQkFBUztJQWFuQyxZQUFZLElBQTJCO1FBQ3JDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQWJkLFdBQU0sR0FBa0IsU0FBUyxDQUFDO1FBRWxDLFlBQU8sR0FBdUIsU0FBUyxDQUFDO1FBQ3hDLFNBQUksR0FBVSxTQUFTLENBQUM7UUFDeEIsWUFBTyxHQUFhLFNBQVMsQ0FBQztRQUM5QixtQkFBYyxHQUFTLFNBQVMsQ0FBQztRQUNqQyxhQUFRLEdBQXFCLFNBQVMsQ0FBQztRQUN2QyxpQkFBWSxHQUFhLFNBQVMsQ0FBQztRQUNuQyxXQUFNLEdBQWEsU0FBUyxDQUFDO1FBQzdCLGlCQUFZLEdBQW1CLFNBQVMsQ0FBQztRQUN6QyxhQUFRLEdBQWUsU0FBUyxDQUFDO1FBSy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTFCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLFdBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsSUFBSSxhQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN0RyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGFBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUkseUJBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUkseUJBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksaUJBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRjtBQTFCRCx3QkEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyLCBVc2VyU2NoZW1hIH0gZnJvbSBcIi4uL1VzZXIvVXNlclwiO1xyXG5pbXBvcnQgeyBXYWxsZXRCYWxhbmNlIH0gZnJvbSBcIi4vV2FsbGV0QmFsYW5jZVwiO1xyXG5pbXBvcnQgeyBCYW5raW5nV2FsbGV0RGF0YSwgU3RlbGxhcldhbGxldERhdGEgfSBmcm9tIFwiLi9XYWxsZXREYXRhXCI7XHJcbmltcG9ydCB7IFdhbGxldFN0YXR1cyB9IGZyb20gXCIuL1dhbGxldFN0YXR1c1wiO1xyXG5pbXBvcnQgeyBCYXNlTW9kZWxTY2hlbWEsIEJhc2VNb2RlbCB9IGZyb20gXCIuLi8uLi9iYXNlXCI7XHJcbmltcG9ydCB7IEFzc2V0U2NoZW1hLCBBc3NldCB9IGZyb20gXCIuLi9Bc3NldFwiO1xyXG5pbXBvcnQgeyBUcmFuc2FjdGlvblNjaGVtYSwgVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vVHJhbnNhY3Rpb25cIjtcclxuaW1wb3J0IHsgUGF5bWVudFNjaGVtYSwgUGF5bWVudCB9IGZyb20gXCIuLi9QYXltZW50XCI7XHJcbmltcG9ydCB7IFdhbGxldFN0YXRlLCBXYWxsZXRTdGF0ZVNjaGVtYSB9IGZyb20gXCIuL1dhbGxldFN0YXRlXCI7XHJcbmltcG9ydCB7IFByb2R1Y3QsIFByb2R1Y3RTY2hlbWEgfSBmcm9tIFwiLi4vRG9tYWluL1Byb2R1Y3RcIjtcclxuXHJcbmV4cG9ydCB7IFN0ZWxsYXJXYWxsZXREYXRhLCBCYW5raW5nV2FsbGV0RGF0YSwgV2FsbGV0QmFsYW5jZSB9O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXYWxsZXRTY2hlbWEgZXh0ZW5kcyBCYXNlTW9kZWxTY2hlbWEge1xyXG4gIHN0YXR1cz86IFdhbGxldFN0YXR1cztcclxuICBzdGF0ZXM/OiBXYWxsZXRTdGF0ZVNjaGVtYVtdO1xyXG4gIHN0ZWxsYXI/OiBTdGVsbGFyV2FsbGV0RGF0YTtcclxuICB1c2VyPzogVXNlclNjaGVtYTtcclxuICBhZGRpdGlvbmFsRGF0YT86IGFueTtcclxuICBwcm9kdWN0PzogUHJvZHVjdFNjaGVtYTtcclxuICBiYWxhbmNlcz86IFdhbGxldEJhbGFuY2VbXTtcclxuICBpc3N1ZWRBc3NldHM/OiBBc3NldFNjaGVtYVtdO1xyXG4gIGFzc2V0cz86IEFzc2V0U2NoZW1hW107XHJcbiAgdHJhbnNhY3Rpb25zPzogVHJhbnNhY3Rpb25TY2hlbWFbXTtcclxuICByZWNlaXZlZD86IFBheW1lbnRTY2hlbWFbXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdhbGxldCBleHRlbmRzIEJhc2VNb2RlbCBpbXBsZW1lbnRzIFdhbGxldFNjaGVtYSB7XHJcbiAgc3RhdHVzPzogV2FsbGV0U3RhdHVzID0gdW5kZWZpbmVkO1xyXG4gIHN0YXRlcz86IFdhbGxldFN0YXRlW107XHJcbiAgc3RlbGxhcj86IFN0ZWxsYXJXYWxsZXREYXRhID0gdW5kZWZpbmVkO1xyXG4gIHVzZXI/OiBVc2VyID0gdW5kZWZpbmVkO1xyXG4gIHByb2R1Y3Q/OiBQcm9kdWN0ID0gdW5kZWZpbmVkO1xyXG4gIGFkZGl0aW9uYWxEYXRhPzogYW55ID0gdW5kZWZpbmVkO1xyXG4gIGJhbGFuY2VzPzogV2FsbGV0QmFsYW5jZVtdID0gdW5kZWZpbmVkO1xyXG4gIGlzc3VlZEFzc2V0cz86IEFzc2V0W10gPSB1bmRlZmluZWQ7XHJcbiAgYXNzZXRzPzogQXNzZXRbXSA9IHVuZGVmaW5lZDtcclxuICB0cmFuc2FjdGlvbnM/OiBUcmFuc2FjdGlvbltdID0gdW5kZWZpbmVkO1xyXG4gIHJlY2VpdmVkPzogUGF5bWVudFtdID0gdW5kZWZpbmVkO1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBQYXJ0aWFsPFdhbGxldFNjaGVtYT4pIHtcclxuICAgIHN1cGVyKGRhdGEpO1xyXG5cclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XHJcblxyXG4gICAgdGhpcy51c2VyID0gZGF0YS51c2VyICYmIG5ldyBVc2VyKGRhdGEudXNlcik7XHJcbiAgICB0aGlzLmlzc3VlZEFzc2V0cyA9IGRhdGEuaXNzdWVkQXNzZXRzICYmIGRhdGEuaXNzdWVkQXNzZXRzLm1hcChpc3N1ZWRBc3NldCA9PiBuZXcgQXNzZXQoaXNzdWVkQXNzZXQpKTtcclxuICAgIHRoaXMuYXNzZXRzID0gZGF0YS5hc3NldHMgJiYgZGF0YS5hc3NldHMubWFwKGFzc2V0ID0+IG5ldyBBc3NldChhc3NldCkpO1xyXG4gICAgdGhpcy5zdGF0ZXMgPSBkYXRhLnN0YXRlcyAmJiBkYXRhLnN0YXRlcy5tYXAoc3RhdGUgPT4gbmV3IFdhbGxldFN0YXRlKHN0YXRlKSk7XHJcbiAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IGRhdGEudHJhbnNhY3Rpb25zICYmIGRhdGEudHJhbnNhY3Rpb25zLm1hcCh0cmFuc2FjdGlvbiA9PiBuZXcgVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pKTtcclxuICAgIHRoaXMucmVjZWl2ZWQgPSBkYXRhLnJlY2VpdmVkICYmIGRhdGEucmVjZWl2ZWQubWFwKHJlY2VpdmVkID0+IG5ldyBQYXltZW50KHJlY2VpdmVkKSk7XHJcbiAgICB0aGlzLnByb2R1Y3QgPSBkYXRhLnByb2R1Y3QgJiYgbmV3IFByb2R1Y3QoZGF0YS5wcm9kdWN0KTtcclxuICB9XHJcbn1cclxuIl19