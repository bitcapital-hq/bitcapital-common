"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UnregisterReason;
(function (UnregisterReason) {
    UnregisterReason["USER_CANCELLATION"] = "user-cancelation";
    UnregisterReason["MEDIATOR_CANCELLATION"] = "mediator-cancelation";
    UnregisterReason["PROVIDER_CANCELLATION"] = "provider-cancelation";
    UnregisterReason["ADMIN_CANCELLATION"] = "admin-cancelation";
    UnregisterReason["OTHER"] = "other";
})(UnregisterReason = exports.UnregisterReason || (exports.UnregisterReason = {}));
class BaseCustody {
    constructor(options) {
        this.options = options;
    }
    feature(type) {
        const feature = this.features.find(f => f.type === type);
        if (!feature) {
            throw new Error(`Provider does not support the "${type}" feature, or has not registered its service`);
        }
        return feature;
    }
}
exports.default = BaseCustody;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUN1c3RvZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcHJvdmlkZXIvQmFzZUN1c3RvZHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFjQSxJQUFZLGdCQU1YO0FBTkQsV0FBWSxnQkFBZ0I7SUFDMUIsMERBQXNDLENBQUE7SUFDdEMsa0VBQThDLENBQUE7SUFDOUMsa0VBQThDLENBQUE7SUFDOUMsNERBQXdDLENBQUE7SUFDeEMsbUNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcsZ0JBQWdCLEdBQWhCLHdCQUFnQixLQUFoQix3QkFBZ0IsUUFNM0I7QUFJRCxNQUE4QixXQUFXO0lBSXZDLFlBQTBCLE9BQTJCO1FBQTNCLFlBQU8sR0FBUCxPQUFPLENBQW9CO0lBQUcsQ0FBQztJQVdsRCxPQUFPLENBQUMsSUFBb0I7UUFDakMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxJQUFJLDhDQUE4QyxDQUFDLENBQUM7U0FDdkc7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBbUNGO0FBMURELDhCQTBEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJTY2hlbWEsIFdhbGxldFNjaGVtYSB9IGZyb20gXCIuLi9tb2RlbHNcIjtcclxuaW1wb3J0IEJhc2VDdXN0b2R5RmVhdHVyZSwgeyBDdXN0b2R5RmVhdHVyZSB9IGZyb20gXCIuL0Jhc2VDdXN0b2R5RmVhdHVyZVwiO1xyXG5pbXBvcnQgeyBDdXN0b2R5UHJvdmlkZXIgfSBmcm9tIFwiLi9DdXN0b2R5UHJvdmlkZXJcIjtcclxuaW1wb3J0IHtcclxuICBDdXN0b2R5QXVkaXRGZWF0dXJlLFxyXG4gIEN1c3RvZHlCbG9ja0ZlYXR1cmUsXHJcbiAgQ3VzdG9keUJvbGV0b0ZlYXR1cmUsXHJcbiAgQ3VzdG9keUNhcmRGZWF0dXJlLFxyXG4gIEN1c3RvZHlEZXBvc2l0RmVhdHVyZSxcclxuICBDdXN0b2R5UGF5bWVudEZlYXR1cmUsXHJcbiAgQ3VzdG9keVBvc3RiYWNrRmVhdHVyZSxcclxuICBDdXN0b2R5V2l0aGRyYXdGZWF0dXJlXHJcbn0gZnJvbSBcIi4vZmVhdHVyZXNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIFVucmVnaXN0ZXJSZWFzb24ge1xyXG4gIFVTRVJfQ0FOQ0VMTEFUSU9OID0gXCJ1c2VyLWNhbmNlbGF0aW9uXCIsXHJcbiAgTUVESUFUT1JfQ0FOQ0VMTEFUSU9OID0gXCJtZWRpYXRvci1jYW5jZWxhdGlvblwiLFxyXG4gIFBST1ZJREVSX0NBTkNFTExBVElPTiA9IFwicHJvdmlkZXItY2FuY2VsYXRpb25cIixcclxuICBBRE1JTl9DQU5DRUxMQVRJT04gPSBcImFkbWluLWNhbmNlbGF0aW9uXCIsXHJcbiAgT1RIRVIgPSBcIm90aGVyXCJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYXNlQ3VzdG9keU9wdGlvbnMge31cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEJhc2VDdXN0b2R5IHtcclxuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogQ3VzdG9keVByb3ZpZGVyO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBmZWF0dXJlczogQmFzZUN1c3RvZHlGZWF0dXJlW107XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgb3B0aW9uczogQmFzZUN1c3RvZHlPcHRpb25zKSB7fVxyXG5cclxuICBwdWJsaWMgZmVhdHVyZSh0eXBlOiBDdXN0b2R5RmVhdHVyZS5BVURJVCk6IEN1c3RvZHlBdWRpdEZlYXR1cmU7XHJcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUuQkxPQ0spOiBDdXN0b2R5QmxvY2tGZWF0dXJlO1xyXG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLkJPTEVUTyk6IEN1c3RvZHlCb2xldG9GZWF0dXJlO1xyXG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLkNBUkQpOiBDdXN0b2R5Q2FyZEZlYXR1cmU7XHJcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUuREVQT1NJVCk6IEN1c3RvZHlEZXBvc2l0RmVhdHVyZTtcclxuICBwdWJsaWMgZmVhdHVyZSh0eXBlOiBDdXN0b2R5RmVhdHVyZS5QQVlNRU5UKTogQ3VzdG9keVBheW1lbnRGZWF0dXJlO1xyXG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLlBPU1RCQUNLKTogQ3VzdG9keVBvc3RiYWNrRmVhdHVyZTtcclxuICBwdWJsaWMgZmVhdHVyZSh0eXBlOiBDdXN0b2R5RmVhdHVyZS5XSVRIRFJBVyk6IEN1c3RvZHlXaXRoZHJhd0ZlYXR1cmU7XHJcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUpOiBCYXNlQ3VzdG9keUZlYXR1cmU7XHJcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUpOiBCYXNlQ3VzdG9keUZlYXR1cmUge1xyXG4gICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuZmVhdHVyZXMuZmluZChmID0+IGYudHlwZSA9PT0gdHlwZSk7XHJcblxyXG4gICAgaWYgKCFmZWF0dXJlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgXCIke3R5cGV9XCIgZmVhdHVyZSwgb3IgaGFzIG5vdCByZWdpc3RlcmVkIGl0cyBzZXJ2aWNlYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZlYXR1cmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlcnMgYSBuZXcgd2FsbGV0IGluIHRoZSBwcm92aWRlciBmb3IgYSBzcGVjaWZpYyBVc2VyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgaW5zdGFuY2UgdG8gYmUgcmVnaXN0ZXJlZCBpbiBwcm92aWRlclxyXG4gICAqIEBwYXJhbSB3YWxsZXQgVGhlIHNwZWNpZmljIHdhbGxldCB0byBiZSByZWdpc3RlcmVkIGluIHByb3ZpZGVyXHJcbiAgICogQHBhcmFtIGV4dGVybmFsSWQgVGhlIElEIG9mIHRoZSBleGlzdGluZyB1c2VyIGluIHRoZSBwcm92aWRlclxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBhc3luYyByZWdpc3RlcihcclxuICAgIHVzZXI6IFVzZXJTY2hlbWEsXHJcbiAgICB3YWxsZXQ6IFdhbGxldFNjaGVtYSxcclxuICAgIGV4dGVybmFsSWQ/OiBhbnlcclxuICApOiBQcm9taXNlPHsgZXh0ZXJuYWxJZDogc3RyaW5nIH0+O1xyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBpbmZvcm1hdGlvbiBvZiBhbiBleGlzdGluZyB1c2VyIGFuZCB3YWxsZXQgaW4gdGhlIGV4dGVybmFsIHByb3ZpZGVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgaW5zdGFuY2UgdG8gYmUgdXBkYXRlZFxyXG4gICAqIEBwYXJhbSB3YWxsZXQgVGhlIHdhbGxldCBpbnN0YW5jZSB0byBiZSB1cGRhdGVkXHJcbiAgICovXHJcbiAgcHVibGljIGFic3RyYWN0IGFzeW5jIHVwZGF0ZSh1c2VyOiBVc2VyU2NoZW1hLCB3YWxsZXQ6IFdhbGxldFNjaGVtYSk6IFByb21pc2U8eyBleHRlcm5hbElkOiBzdHJpbmcgfT47XHJcblxyXG4gIC8qKlxyXG4gICAqIFVucmVnaXN0ZXJzIGEgd2FsbGV0IGZyb20gdGhlIHByb3ZpZGVyIGZvciBhIHNwZWNpZmljIFVzZXIuIFRoaXNcclxuICAgKiBtYXkgYmUgaXJyZXZlcnNpYmxlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgaW5zdGFuY2UgdG8gYmUgdW5yZWdpc3RlcmVkIGluIHByb3ZpZGVyXHJcbiAgICogQHBhcmFtIHdhbGxldCBUaGUgc3BlY2lmaWMgd2FsbGV0IHRvIGJlIHVucmVnaXN0ZXJlZCBpbiBwcm92aWRlclxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBhc3luYyB1bnJlZ2lzdGVyKFxyXG4gICAgdXNlcjogVXNlclNjaGVtYSxcclxuICAgIHdhbGxldDogV2FsbGV0U2NoZW1hLFxyXG4gICAgcmVhc29uOiBVbnJlZ2lzdGVyUmVhc29uXHJcbiAgKTogUHJvbWlzZTx7IGV4dGVybmFsSWQ6IHN0cmluZyB9PjtcclxufVxyXG4iXX0=