"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UnregisterReason;
(function (UnregisterReason) {
    UnregisterReason["USER_CANCELLATION"] = "user-cancelation";
    UnregisterReason["MEDIATOR_CANCELLATION"] = "mediator-cancelation";
    UnregisterReason["PROVIDER_CANCELLATION"] = "provider-cancelation";
    UnregisterReason["ADMIN_CANCELLATION"] = "admin-cancelation";
    UnregisterReason["OTHER"] = "other";
})(UnregisterReason = exports.UnregisterReason || (exports.UnregisterReason = {}));
class BaseCustody {
    constructor(options) {
        this.options = options;
    }
    feature(type) {
        const feature = this.features.find(f => f.type === type);
        if (!feature) {
            throw new Error(`Provider does not support the "${type}" feature, or has not registered its service`);
        }
        return feature;
    }
}
exports.default = BaseCustody;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZUN1c3RvZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcHJvdmlkZXIvQmFzZUN1c3RvZHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFlQSxJQUFZLGdCQU1YO0FBTkQsV0FBWSxnQkFBZ0I7SUFDMUIsMERBQXNDLENBQUE7SUFDdEMsa0VBQThDLENBQUE7SUFDOUMsa0VBQThDLENBQUE7SUFDOUMsNERBQXdDLENBQUE7SUFDeEMsbUNBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcsZ0JBQWdCLEdBQWhCLHdCQUFnQixLQUFoQix3QkFBZ0IsUUFNM0I7QUFJRCxNQUE4QixXQUFXO0lBSXZDLFlBQTBCLE9BQTJCO1FBQTNCLFlBQU8sR0FBUCxPQUFPLENBQW9CO0lBQUcsQ0FBQztJQVlsRCxPQUFPLENBQUMsSUFBb0I7UUFDakMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxJQUFJLDhDQUE4QyxDQUFDLENBQUM7U0FDdkc7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBbUNGO0FBM0RELDhCQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJTY2hlbWEsIFdhbGxldFNjaGVtYSB9IGZyb20gXCIuLi9tb2RlbHNcIjtcbmltcG9ydCBCYXNlQ3VzdG9keUZlYXR1cmUsIHsgQ3VzdG9keUZlYXR1cmUgfSBmcm9tIFwiLi9CYXNlQ3VzdG9keUZlYXR1cmVcIjtcbmltcG9ydCB7IEN1c3RvZHlQcm92aWRlciB9IGZyb20gXCIuL0N1c3RvZHlQcm92aWRlclwiO1xuaW1wb3J0IHtcbiAgQ3VzdG9keUF1ZGl0RmVhdHVyZSxcbiAgQ3VzdG9keUJsb2NrRmVhdHVyZSxcbiAgQ3VzdG9keUJvbGV0b0ZlYXR1cmUsXG4gIEN1c3RvZHlDYXJkRmVhdHVyZSxcbiAgQ3VzdG9keURlcG9zaXRGZWF0dXJlLFxuICBDdXN0b2R5UGF5bWVudEZlYXR1cmUsXG4gIEN1c3RvZHlQb3N0YmFja0ZlYXR1cmUsXG4gIEN1c3RvZHlXaXRoZHJhd0ZlYXR1cmUsXG4gIEN1c3RvZHlQaG9uZUNoYXJnZUZlYXR1cmVcbn0gZnJvbSBcIi4vZmVhdHVyZXNcIjtcblxuZXhwb3J0IGVudW0gVW5yZWdpc3RlclJlYXNvbiB7XG4gIFVTRVJfQ0FOQ0VMTEFUSU9OID0gXCJ1c2VyLWNhbmNlbGF0aW9uXCIsXG4gIE1FRElBVE9SX0NBTkNFTExBVElPTiA9IFwibWVkaWF0b3ItY2FuY2VsYXRpb25cIixcbiAgUFJPVklERVJfQ0FOQ0VMTEFUSU9OID0gXCJwcm92aWRlci1jYW5jZWxhdGlvblwiLFxuICBBRE1JTl9DQU5DRUxMQVRJT04gPSBcImFkbWluLWNhbmNlbGF0aW9uXCIsXG4gIE9USEVSID0gXCJvdGhlclwiXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUN1c3RvZHlPcHRpb25zIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEJhc2VDdXN0b2R5IHtcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHR5cGU6IEN1c3RvZHlQcm92aWRlcjtcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGZlYXR1cmVzOiBCYXNlQ3VzdG9keUZlYXR1cmVbXTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIG9wdGlvbnM6IEJhc2VDdXN0b2R5T3B0aW9ucykge31cblxuICBwdWJsaWMgZmVhdHVyZSh0eXBlOiBDdXN0b2R5RmVhdHVyZS5BVURJVCk6IEN1c3RvZHlBdWRpdEZlYXR1cmU7XG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLkJMT0NLKTogQ3VzdG9keUJsb2NrRmVhdHVyZTtcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUuQk9MRVRPKTogQ3VzdG9keUJvbGV0b0ZlYXR1cmU7XG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLkNBUkQpOiBDdXN0b2R5Q2FyZEZlYXR1cmU7XG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLkRFUE9TSVQpOiBDdXN0b2R5RGVwb3NpdEZlYXR1cmU7XG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLlBBWU1FTlQpOiBDdXN0b2R5UGF5bWVudEZlYXR1cmU7XG4gIHB1YmxpYyBmZWF0dXJlKHR5cGU6IEN1c3RvZHlGZWF0dXJlLlBPU1RCQUNLKTogQ3VzdG9keVBvc3RiYWNrRmVhdHVyZTtcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUuV0lUSERSQVcpOiBDdXN0b2R5V2l0aGRyYXdGZWF0dXJlO1xuICBwdWJsaWMgZmVhdHVyZSh0eXBlOiBDdXN0b2R5RmVhdHVyZS5QSE9ORV9DSEFSR0UpOiBDdXN0b2R5UGhvbmVDaGFyZ2VGZWF0dXJlO1xuICBwdWJsaWMgZmVhdHVyZSh0eXBlOiBDdXN0b2R5RmVhdHVyZSk6IEJhc2VDdXN0b2R5RmVhdHVyZTtcbiAgcHVibGljIGZlYXR1cmUodHlwZTogQ3VzdG9keUZlYXR1cmUpOiBCYXNlQ3VzdG9keUZlYXR1cmUge1xuICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmZlYXR1cmVzLmZpbmQoZiA9PiBmLnR5cGUgPT09IHR5cGUpO1xuXG4gICAgaWYgKCFmZWF0dXJlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgdGhlIFwiJHt0eXBlfVwiIGZlYXR1cmUsIG9yIGhhcyBub3QgcmVnaXN0ZXJlZCBpdHMgc2VydmljZWApO1xuICAgIH1cblxuICAgIHJldHVybiBmZWF0dXJlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIG5ldyB3YWxsZXQgaW4gdGhlIHByb3ZpZGVyIGZvciBhIHNwZWNpZmljIFVzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyIFRoZSB1c2VyIGluc3RhbmNlIHRvIGJlIHJlZ2lzdGVyZWQgaW4gcHJvdmlkZXJcbiAgICogQHBhcmFtIHdhbGxldCBUaGUgc3BlY2lmaWMgd2FsbGV0IHRvIGJlIHJlZ2lzdGVyZWQgaW4gcHJvdmlkZXJcbiAgICogQHBhcmFtIGV4dGVybmFsSWQgVGhlIElEIG9mIHRoZSBleGlzdGluZyB1c2VyIGluIHRoZSBwcm92aWRlclxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGFzeW5jIHJlZ2lzdGVyKFxuICAgIHVzZXI6IFVzZXJTY2hlbWEsXG4gICAgd2FsbGV0OiBXYWxsZXRTY2hlbWEsXG4gICAgZXh0ZXJuYWxJZD86IGFueVxuICApOiBQcm9taXNlPHsgZXh0ZXJuYWxJZDogc3RyaW5nIH0+O1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBpbmZvcm1hdGlvbiBvZiBhbiBleGlzdGluZyB1c2VyIGFuZCB3YWxsZXQgaW4gdGhlIGV4dGVybmFsIHByb3ZpZGVyLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlciBUaGUgdXNlciBpbnN0YW5jZSB0byBiZSB1cGRhdGVkXG4gICAqIEBwYXJhbSB3YWxsZXQgVGhlIHdhbGxldCBpbnN0YW5jZSB0byBiZSB1cGRhdGVkXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgYXN5bmMgdXBkYXRlKHVzZXI6IFVzZXJTY2hlbWEsIHdhbGxldDogV2FsbGV0U2NoZW1hKTogUHJvbWlzZTx7IGV4dGVybmFsSWQ6IHN0cmluZyB9PjtcblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYSB3YWxsZXQgZnJvbSB0aGUgcHJvdmlkZXIgZm9yIGEgc3BlY2lmaWMgVXNlci4gVGhpc1xuICAgKiBtYXkgYmUgaXJyZXZlcnNpYmxlLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlciBUaGUgdXNlciBpbnN0YW5jZSB0byBiZSB1bnJlZ2lzdGVyZWQgaW4gcHJvdmlkZXJcbiAgICogQHBhcmFtIHdhbGxldCBUaGUgc3BlY2lmaWMgd2FsbGV0IHRvIGJlIHVucmVnaXN0ZXJlZCBpbiBwcm92aWRlclxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGFzeW5jIHVucmVnaXN0ZXIoXG4gICAgdXNlcjogVXNlclNjaGVtYSxcbiAgICB3YWxsZXQ6IFdhbGxldFNjaGVtYSxcbiAgICByZWFzb246IFVucmVnaXN0ZXJSZWFzb25cbiAgKTogUHJvbWlzZTx7IGV4dGVybmFsSWQ6IHN0cmluZyB9Pjtcbn1cbiJdfQ==